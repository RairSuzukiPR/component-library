{"version":3,"file":"Field-07798b0b.js","sources":["../../node_modules/nanoid/index.browser.js","../../src/utils/useUniqueID.ts","../../src/fields/FieldContext.ts","../../src/fields/styles.ts","../../src/fields/Label.tsx","../../src/fields/Input.tsx","../../src/fields/Textarea.tsx","../../src/fields/Field.tsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { customAlphabet } from 'nanoid';\nimport { useState } from 'react';\n\nconst nanoid = customAlphabet('1234567890abc', 10);\n\nexport const useUniqueID = (): string => {\n  const [id] = useState(nanoid());\n\n  return id;\n};\n","import { createContext } from 'react';\n\nexport const FieldContext = createContext<string | undefined>(undefined);\n","import styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport {\n  SECONDARY_COLOR,\n  SECONDARY_TEXT_COLOR,\n  PRIMARY_COLOR,\n  DISABLED_OPACITY,\n} from '../utils/styles';\nimport { TextareaProps } from './Textarea';\n\nexport const StyledLabel = styled.label`\n  font-weight: 500;\n  margin-bottom: 0.4rem;\n`;\n\nexport const StyledInput = styled.input`\n  display: block;\n  width: 100%;\n  padding: 0.5rem 0.4rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: ${SECONDARY_TEXT_COLOR};\n  background-color: transparent;\n  border: 1px solid ${SECONDARY_COLOR};\n  appearance: none;\n  border-radius: 0;\n  transition: all 0.15s ease-in-out;\n\n  &:focus {\n    outline: none;\n    border-color: ${PRIMARY_COLOR};\n    box-shadow: 0 0 0 0.2rem ${transparentize(0.75, PRIMARY_COLOR)};\n  }\n\n  &:disabled {\n    background-color: ${SECONDARY_COLOR};\n    opacity: ${DISABLED_OPACITY};\n  }\n`;\n\nexport const StyledTextarea = styled(StyledInput as never as 'textarea').attrs({\n  as: 'textarea',\n})<TextareaProps>`\n  resize: ${(props) => !props.isResizable && 'none'};\n`;\n","import React, { useContext } from 'react';\nimport { FieldContext } from './FieldContext';\nimport * as S from './styles';\n\nexport const Label = React.forwardRef<\n  HTMLLabelElement,\n  React.ComponentPropsWithoutRef<'label'>\n>((props, ref) => {\n  const id = useContext(FieldContext);\n\n  return <S.StyledLabel ref={ref} htmlFor={id} {...props} />;\n});\n\nLabel.displayName = 'Field.Label';\n","import React, { useContext } from 'react';\nimport { FieldContext } from './FieldContext';\nimport * as S from './styles';\n\nexport const Input = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentPropsWithoutRef<'input'>\n>((props, ref) => {\n  const id = useContext(FieldContext);\n\n  return <S.StyledInput ref={ref} id={id} {...props} />;\n});\n\nInput.displayName = 'Field.Input';\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldContext } from './FieldContext';\nimport { StyledTextarea } from './styles';\n\nexport interface TextareaProps\n  extends React.ComponentPropsWithoutRef<'textarea'> {\n  isResizable?: boolean;\n}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ isResizable, ...props }, ref) => {\n    const id = useContext(FieldContext);\n\n    return (\n      <StyledTextarea ref={ref} id={id} isResizable={isResizable} {...props} />\n    );\n  },\n);\n\nTextarea.displayName = 'Field.Textarea';\n\nTextarea.defaultProps = {\n  isResizable: true,\n};\n\nTextarea.propTypes = {\n  isResizable: PropTypes.bool,\n};\n","import React from 'react';\nimport { useUniqueID } from '../utils/useUniqueID';\nimport { FieldContext } from './FieldContext';\nimport { Label } from './Label';\nimport { Input } from './Input';\nimport { Textarea } from './Textarea';\n\ninterface FieldProps {\n  children: React.ReactNode;\n}\ninterface FieldComposition {\n  Label: typeof Label;\n  Input: typeof Input;\n  Textarea: typeof Textarea;\n}\nexport const Field: React.FC<FieldProps> & FieldComposition = ({\n  children,\n}) => {\n  const id = useUniqueID();\n  return <FieldContext.Provider value={id}>{children}</FieldContext.Provider>;\n};\n\nField.Label = Label;\nField.Input = Input;\nField.Textarea = Textarea;\n"],"names":["random","bytes","customRandom","alphabet","defaultSize","getRandom","mask","step","size","id","j","customAlphabet","nanoid","useUniqueID","useState","FieldContext","createContext","StyledLabel","styled","StyledInput","SECONDARY_TEXT_COLOR","SECONDARY_COLOR","PRIMARY_COLOR","transparentize","DISABLED_OPACITY","StyledTextarea","props","Label","React","ref","useContext","jsx","S.StyledLabel","Input","S.StyledInput","Textarea","isResizable","PropTypes","Field","children"],"mappings":"yPACO,IAAIA,EAASC,GAAS,OAAO,gBAAgB,IAAI,WAAWA,CAAK,CAAC,EAC9DC,EAAe,CAACC,EAAUC,EAAaC,IAAc,CAC9D,IAAIC,GAAQ,GAAM,KAAK,IAAIH,EAAS,OAAS,CAAC,EAAI,KAAK,KAAQ,EAC3DI,EAAO,CAAC,EAAG,IAAMD,EAAOF,EAAeD,EAAS,QACpD,MAAO,CAACK,EAAOJ,IAAgB,CAC7B,IAAIK,EAAK,GACT,OAAa,CACX,IAAIR,EAAQI,EAAUE,CAAI,EACtBG,EAAIH,EACR,KAAOG,KAEL,GADAD,GAAMN,EAASF,EAAMS,CAAC,EAAIJ,CAAI,GAAK,GAC/BG,EAAG,SAAWD,EAAM,OAAOC,CAElC,CACF,CACH,EACWE,EAAiB,CAACR,EAAUK,EAAO,KAC5CN,EAAaC,EAAUK,EAAMR,CAAM,ECfrC,MAAMY,EAASD,EAAe,gBAAiB,EAAE,EAEpCE,EAAc,IAAc,CACvC,KAAM,CAACJ,CAAE,EAAIK,WAASF,EAAQ,CAAA,EAEvB,OAAAH,CACT,ECPaM,EAAeC,EAAAA,cAAkC,MAAS,ECQ1DC,EAAcC,EAAO;AAAA;AAAA;AAAA,EAKrBC,EAAcD,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMvBE,CAAoB;AAAA;AAAA,sBAETC,CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOjBC,CAAa;AAAA,+BACFC,EAAe,IAAMD,CAAa,CAAC;AAAA;AAAA;AAAA;AAAA,wBAI1CD,CAAe;AAAA,eACxBG,CAAgB;AAAA;AAAA,EAIlBC,EAAiBP,EAAOC,CAAkC,EAAE,MAAM,CAC7E,GAAI,UACN,CAAC;AAAA,YACYO,GAAU,CAACA,EAAM,aAAe,MAAM;AAAA,ECvC5CC,EAAAC,EAAA,WAAA,CAAAF,EAAAG,IAAA,CAIL,MAAApB,EAAAqB,aAAAf,CAAA,EAEA,OAAAgB,EAAAC,EAAA,CAAA,IAAAH,EAAA,QAAApB,EAAA,GAAAiB,CAAA,CAAA,CACF,CAAA,EAEAC,EAAA,YAAA,4ICTO,MAAAM,EAAAL,EAAA,WAAA,CAAAF,EAAAG,IAAA,CAIL,MAAApB,EAAAqB,aAAAf,CAAA,EAEA,OAAAgB,EAAAG,EAAA,CAAA,IAAAL,EAAA,GAAApB,EAAA,GAAAiB,CAAA,CAAA,CACF,CAAA,EAEAO,EAAA,YAAA,4ICHO,MAAAE,EAAAP,EAAA,WAAuB,CAAA,CAAA,YAAAQ,EAAA,GAAAV,CAAA,EAAAG,IAAA,CAE1B,MAAApB,EAAAqB,aAAAf,CAAA,EAEA,OAAAgB,EAAAN,EAAA,CAAA,IAAAI,EAAA,GAAApB,EAAA,YAAA2B,EAAA,GAAAV,CAAA,CAAA,CACyE,CAG7E,EAEAS,EAAA,YAAA,iBAEAA,EAAA,aAAA,CAAwB,YAAA,EAExB,EAEAA,EAAA,UAAA,CAAqB,YAAAE,EAAA,IAErB,yPCbO,MAAAC,EAAA,CAAA,CAAwD,SAAAC,CAE/D,IAAA,CACE,MAAA9B,EAAAI,IACA,OAAAkB,EAAAhB,EAAA,SAAA,CAAA,MAAAN,EAAA,SAAA8B,CAAA,CAAA,CACF,EAEAD,EAAA,MAAAX,EACAW,EAAA,MAAAL,EACAK,EAAA,SAAAH","x_google_ignoreList":[0]}